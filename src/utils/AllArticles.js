export const allMainArticles = [
  {
    id: 100,
    title: "Storing my secrets safely on GitHub",
    subtitle: "The day i exposed my secret keys in Git, and how did it solve.",
    dateMonth: "JUN",
    dateNumber: 21,
    minutesRead: 5,
    categories: ["Best Practices", "Web Development", "GitHub"],
    banner:
      "https://blog.circulobienesraices.com/wp-content/uploads/2021/09/notario-pu%CC%81blico-en-me%CC%81xico-cbr-alt-839x560.jpg",
    articleImg:
      "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2FgitEmail.jpg?alt=media&token=b20c6652-834b-424a-8f74-ef2acb66e2ed",
    content:
      "Many days ago, spending time sending commits I was ignored an awarefrom GitHub, lately GitGuardian emailed me on regard security leak, Key exposed with your GitHub account. What happened? Secret keys generated by reCAPTCHA system were exposed in my repository. At first my “solution” was just deleting the .env file where I stored those keys, save changes, commit and push again. however, it didn’t fix security problem. Since git keeps file in the commit, history. Afterward I started searching for a solution in stack overflow, and I came across with git filter-repo API",
    paragrapsArticle: [
      {
        subtitleParagraph:
          "Step by step guideline to remediate the security leak.undefined",
        paragraph: "",
        list: [
          "1.	Revoke the exposed secret keys.",
          "2.	Clean the git history",
          "3.	Inspect Logs.",
        ],
        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: "Step 1: Revoking the secret keys.",
        paragraph:
          "At first i had to remove .env file, so be ensure no one will access the involved service.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph:
          "Step 2: Clean the git history (is when git filter-repo comes into play)",
        paragraph:
          "Thankfully, for this simple case, git provides this command that make cleaning things up easy.I recommend you use git-filter-repo, this tool was very useful to rewrite the history of my project in a straightforward way",
        list: [],
        codeSnippet: "",
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph: "First, I installed git-filter-repo in my bash.",
        list: [],
        codeSnippet: [],
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "To tell git-filter-repo to excise a file from the git history, I use this single command:",
        list: [],
        codeSnippet: {},
        code: "git filter-repo --use-base-name --path [FILENAME] --invert-paths",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "The - -use-base-name option tells git-filter-repo that we are specifying a file name, and not a full path to a file. Normally, git-filter-repo command works by ignoring the filenames specified (as the name suggest, in order to filter out). So, I was interested in opposite behavior, we can indicate to ignore everything except the specified file. So we must pass - - invert-paths to indicate this behavior. If you leave off the - - invert-paths, you will excise everything except the file you are specifying, which is exact the opposite case we want, and would likely be a completely mess, so, don’t do that. ",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "Step 3: Inspect logs.",
        paragraph:
          "After cleaning, I inspected my Git logs to confirm that the .env file was gone from the history.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "In conclusion: i think this is not the only or ultimate solution, we should consider different factors such as project size, team geography, and project scope, your may need additional safeguards, though in my specific case, this approach works perfectly. The key lesson I learned were:",

        list: [
          "•	Is a good practice to add the .env file to .gitignore from the very beginning",
          "•	 Revoke compromised keys immediately.",
          "•	Don’t just delete files, instead, make sure they are removed from git history",
        ],
        codeSnippet: {},
        code: "",
      },
      {
        subtitle: undefined,
        paragraph:
          "Mistakes happen, but what matters is learning about them and making sure they don’t happen again.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
    ],
  },
  {
    id: 101,
    title: "Async/await funtions",
    subtitle: "The day i exposed my secret keys in Git, and how did it solve.",
    dateMonth: "AGU",
    dateNumber: 8,
    minutesRead: 5,
    categories: ["Best Practices", "Web Development", "GitHub"],
    banner:
      "https://nestify.io/wp-content/webp-express/webp-images/uploads/2024/06/image-89.png.webp",
    articleImg:
      "https://nestify.io/wp-content/webp-express/webp-images/uploads/2024/06/image-89.png.webp",
    content:
      "Many days ago, spending time sending commits I was ignored an awarefrom GitHub, lately GitGuardian emailed me on regard security leak, Key exposed with your GitHub account. What happened? Secret keys generated by reCAPTCHA system were exposed in my repository. At first my “solution” was just deleting the .env file where I stored those keys, save changes, commit and push again. however, it didn’t fix security problem. Since git keeps file in the commit, history. Afterward I started searching for a solution in stack overflow, and I came across with git filter-repo API",
    paragrapsArticle: [
      {
        subtitleParagraph:
          "Step by step guideline to remediate the security leak.undefined",
        paragraph: "",
        list: [
          "1.	Revoke the exposed secret keys.",
          "2.	Clean the git history",
          "3.	Inspect Logs.",
        ],
        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: "Step 1: Revoking the secret keys.",
        paragraph:
          "At first i had to remove .env file, so be ensure no one will access the involved service.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph:
          "Step 2: Clean the git history (is when git filter-repo comes into play)",
        paragraph:
          "Thankfully, for this simple case, git provides this command that make cleaning things up easy.I recommend you use git-filter-repo, this tool was very useful to rewrite the history of my project in a straightforward way",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph: "First, I installed git-filter-repo in my bash.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "To tell git-filter-repo to excise a file from the git history, I use this single command:",
        list: [],
        codeSnippet: {},
        code: "git filter-repo --use-base-name --path [FILENAME] --invert-paths",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "The - -use-base-name option tells git-filter-repo that we are specifying a file name, and not a full path to a file. Normally, git-filter-repo command works by ignoring the filenames specified (as the name suggest, in order to filter out). So, I was interested in opposite behavior, we can indicate to ignore everything except the specified file. So we must pass - - invert-paths to indicate this behavior. If you leave off the - - invert-paths, you will excise everything except the file you are specifying, which is exact the opposite case we want, and would likely be a completely mess, so, don’t do that. ",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "Step 3: Inspect logs.",
        paragraph:
          "After cleaning, I inspected my Git logs to confirm that the .env file was gone from the history.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "In conclusion: i think this is not the only or ultimate solution, we should consider different factors such as project size, team geography, and project scope, your may need additional safeguards, though in my specific case, this approach works perfectly. The key lesson I learned were:",

        list: [
          "•	Is a good practice to add the .env file to .gitignore from the very beginning",
          "•	 Revoke compromised keys immediately.",
          "•	Don’t just delete files, instead, make sure they are removed from git history",
        ],
        codeSnippet: {},
        code: "",
      },
      {
        subtitle: undefined,
        paragraph:
          "Mistakes happen, but what matters is learning about them and making sure they don’t happen again.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
    ],
  },
  {
    id: 102,
    title: "Promises in Java Script as in real life",
    subtitle: "The day i exposed my secret keys in Git, and how did it solve.",
    dateMonth: "AGU",
    dateNumber: 17,
    minutesRead: 10,
    categories: ["Web Development", "JavaScript", "UX"],
    banner:
      "https://cdn-media-0.freecodecamp.org/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png",
    articleImg:
      "https://cdn-media-0.freecodecamp.org/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png",
    content:
      "Many days ago, spending time sending commits I was ignored an awarefrom GitHub, lately GitGuardian emailed me on regard security leak, Key exposed with your GitHub account. What happened? Secret keys generated by reCAPTCHA system were exposed in my repository. At first my “solution” was just deleting the .env file where I stored those keys, save changes, commit and push again. however, it didn’t fix security problem. Since git keeps file in the commit, history. Afterward I started searching for a solution in stack overflow, and I came across with git filter-repo API",
    paragrapsArticle: [
      {
        subtitleParagraph:
          "Step by step guideline to remediate the security leak.undefined",
        paragraph: "",
        list: [
          "1.	Revoke the exposed secret keys.",
          "2.	Clean the git history",
          "3.	Inspect Logs.",
        ],
        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: "Step 1: Revoking the secret keys.",
        paragraph:
          "At first i had to remove .env file, so be ensure no one will access the involved service.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph:
          "Step 2: Clean the git history (is when git filter-repo comes into play)",
        paragraph:
          "Thankfully, for this simple case, git provides this command that make cleaning things up easy.I recommend you use git-filter-repo, this tool was very useful to rewrite the history of my project in a straightforward way",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph: "First, I installed git-filter-repo in my bash.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "To tell git-filter-repo to excise a file from the git history, I use this single command:",
        list: [],
        codeSnippet: {},
        code: "git filter-repo --use-base-name --path [FILENAME] --invert-paths",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "The - -use-base-name option tells git-filter-repo that we are specifying a file name, and not a full path to a file. Normally, git-filter-repo command works by ignoring the filenames specified (as the name suggest, in order to filter out). So, I was interested in opposite behavior, we can indicate to ignore everything except the specified file. So we must pass - - invert-paths to indicate this behavior. If you leave off the - - invert-paths, you will excise everything except the file you are specifying, which is exact the opposite case we want, and would likely be a completely mess, so, don’t do that. ",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "Step 3: Inspect logs.",
        paragraph:
          "After cleaning, I inspected my Git logs to confirm that the .env file was gone from the history.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "In conclusion: i think this is not the only or ultimate solution, we should consider different factors such as project size, team geography, and project scope, your may need additional safeguards, though in my specific case, this approach works perfectly. The key lesson I learned were:",

        list: [
          "•	Is a good practice to add the .env file to .gitignore from the very beginning",
          "•	 Revoke compromised keys immediately.",
          "•	Don’t just delete files, instead, make sure they are removed from git history",
        ],
        codeSnippet: {},
        code: "",
      },
      {
        subtitle: undefined,
        paragraph:
          "Mistakes happen, but what matters is learning about them and making sure they don’t happen again.",
        list: [],
        codeSnippet: {
          codeBreakdown: [
            "mediaStatus es un objeto que almacena el estado de carga de cada medio (video e imágenes)",
            "Inicialmente, todos los valores están en false porque aún no se ha intentado cargar nada",
          ],
          codeTitleImg: "",
          codePreview: "",
          balazo: "",
        },
        code: undefined,
      },
    ],
  },
];
